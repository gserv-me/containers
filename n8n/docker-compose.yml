### ENV VARS
# DB_NAME: Database name.
# DB_PASS: Database user password.
# DB_USER: Database user name.
# ENCRYPTION_KEY: n8n encryption key.
###

services:
  n8n-db:
    container_name: n8n-db
    image: postgres:17

    volumes:
      - /srv/docker/gserv/n8n/db:/var/lib/postgresql/data

    environment:
      POSTGRES_DB: "${DB_NAME}"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASS}"

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 5s
      retries: 10

    networks:
      - n8n

  n8n-redis:
    image: redis:6-alpine
    restart: always

    volumes:
      - /srv/docker/gserv/n8n/redis:/data

    networks:
      - n8n

    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n:
    extends:
      file: common.yml
      service: common

    labels:
      # HTTP
      - "traefik.http.routers.n8n_http.entrypoints=web"
      - "traefik.http.routers.n8n_http.rule=Host(`n8n.gserv.me`)"
      - "traefik.http.routers.n8n_http.middlewares=https"
      - "traefik.http.middlewares.https.redirectscheme.scheme=https"

      # HTTPS
      - "traefik.http.routers.n8n.rule=Host(`n8n.gserv.me`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls.certresolver=letsencrypt"
      - "traefik.http.routers.n8n.service=n8n"

      # Load Balancer
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
      - "traefik.http.services.n8n.loadbalancer.server.scheme=http"

    networks:
      - n8n
      - web

  n8n-worker:
    extends:
      file: common.yml
      service: common

    command: worker

    networks:
      - n8n

    depends_on:
      - n8n

networks:
  web:
    external: true

  n8n:
    driver: bridge
    name: n8n-gserv
