services:
  sonarqube:
    container_name: sonarqube
    image: sonarqube:community

    read_only: true
    restart: unless-stopped

    depends_on:
      sonarqube-db:
        condition: service_healthy

    environment:
      SONAR_JDBC_URL: "jdbc:postgresql://sonarqube-db:5432/${DB_NAME}"
      SONAR_JDBC_USERNAME: "${DB_USER}"
      SONAR_JDBC_PASSWORD: "${DB_PASS}"

    labels:
      # HTTP
      - "traefik.http.routers.sonarqube_http.entrypoints=web"
      - "traefik.http.routers.sonarqube_http.rule=Host(`sq.gserv.me`)"
      - "traefik.http.routers.sonarqube_http.middlewares=https"
      - "traefik.http.middlewares.https.redirectscheme.scheme=https"

      # HTTPS
      - "traefik.http.routers.sonarqube.rule=Host(`sq.gserv.me`)"
      - "traefik.http.routers.sonarqube.entrypoints=websecure"
      - "traefik.http.routers.sonarqube.tls.certresolver=letsencrypt"
      - "traefik.http.routers.sonarqube.service=sonarqube"

      # Load Balancer
      - "traefik.http.services.sonarqube.loadbalancer.server.port=9000"
      - "traefik.http.services.sonarqube.loadbalancer.server.scheme=http"

    volumes:
      - /srv/docker/gserv/sonarqube/data:/opt/sonarqube/data
      - /srv/docker/gserv/sonarqube/extensions:/opt/sonarqube/extensions
      - /srv/docker/gserv/sonarqube/logs:/opt/sonarqube/logs
      - /srv/docker/gserv/sonarqube/temp:/opt/sonarqube/temp

    networks:
      - web
      - sonarqube

  sonarqube-db:
    container_name: postgresql
    image: postgres:17
    restart: unless-stopped

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

    environment:
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASS}"
      POSTGRES_DB: "${DB_NAME}"

    volumes:
      - /srv/docker/gserv/sonarqube/db:/var/lib/postgresql/data

    networks:
      - sonarqube

networks:
  web:
    external: true

  sonarqube:
    driver: bridge
    name: sonarqube-gserv
